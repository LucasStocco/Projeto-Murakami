ğŸ“˜ Resumo â€“ IntroduÃ§Ã£o ao Desenvolvimento de Sistemas Web
ğŸ”¹ Unidade 1 â€“ IntroduÃ§Ã£o ao Desenvolvimento de Sistemas Web
TÃ³pico 1 â€“ Internet

Origens: nasceu com a ARPANET (anos 1960), projeto militar dos EUA â†’ base do TCP/IP (Robert Kahn e Vint Cerf).

E-mail (1972) foi a primeira aplicaÃ§Ã£o.

WWW (1989 â€“ Tim Berners-Lee): sistema de hipertexto acessado via navegador.

No Brasil: chegou em 1988 em universidades; uso comercial sÃ³ em 1994 (Embratel).

Funcionamento:

TCP/IP â†’ garante a comunicaÃ§Ã£o entre redes diferentes.

DNS (Domain Name System) â†’ traduz nomes de sites em IPs.

HTTP â†’ protocolo que permite a navegaÃ§Ã£o na web.

TÃ³pico 2 â€“ Desenvolvimento para Web

HTML â†’ estrutura e conteÃºdo.

XHTML â†’ versÃ£o mais rigorosa do HTML (baseada em XML).

CSS â†’ estilo e layout.

JavaScript e Web APIs â†’ interaÃ§Ã£o e dinamismo.

PadrÃµes Web (W3C) â†’ garantem acessibilidade, usabilidade e compatibilidade entre navegadores.

Acessibilidade â†’ uso adequado de alt em imagens, contraste, navegaÃ§Ã£o por teclado etc.

Web MÃ³vel â†’ design responsivo para celulares/tablets.

Browsers â†’ Chrome, Firefox, Safari, Edge, Opera etc.

TÃ³pico 3 â€“ Ferramentas e Linguagens

Ferramentas de ediÃ§Ã£o:

Notepad++, NetBeans, Dreamweaver, Aptana, Komodo, MS Expression Web .

Linguagens server-side:

ASP, PHP (1995, Rasmus Lerdorf, scripts dinÃ¢micos lado servidor), JSP (Java Server Pages).

Linguagens client-side: HTML, CSS, JavaScript .

Servidores Web: Apache, IIS .

ğŸ”¹ Unidade 2 â€“ HTML (HyperText Markup Language)
Fundamentos

Estrutura: <!DOCTYPE>, <html>, <head>, <body>.

Elementos bÃ¡sicos: tÃ­tulos (<h1>-<h6>), parÃ¡grafos (<p>), links (<a>), imagens (<img>).

ComentÃ¡rios: <!-- ... -->.

FormataÃ§Ã£o

Quebras de linha: <br>.

Estilos inline (ex: <p style="color:red;">).

Negrito (<b>, <strong>), itÃ¡lico (<i>, <em>), sublinhado (<u>).

Listas: ordenadas <ol>, nÃ£o ordenadas <ul>, de definiÃ§Ã£o <dl>.

Tabelas: <table>, <tr>, <td>, <th>.

FormulÃ¡rios: <form>, <input>, <textarea>, <select>, <button>.

Tornando a pÃ¡gina interativa

Links com <a href="">.

Frames (hoje obsoletos).

FormulÃ¡rios para interaÃ§Ã£o usuÃ¡rio-servidor.

Listas e tabelas para organizaÃ§Ã£o de dados .

ğŸ”¹ Unidade 3 â€“ CSS e JavaScript
CSS (Cascading Style Sheets)

FunÃ§Ã£o: separar conteÃºdo (HTML) de apresentaÃ§Ã£o (estilo).

Estrutura: seletor { propriedade: valor; }.

Formas de uso:

Externa: arquivo .css linkado no <head>.

Interna: dentro de <style>.

Inline: no prÃ³prio elemento HTML.

Principais propriedades:

Texto: color, font-family, font-size, text-align, text-decoration.

Fundo: background-color, background-image, background-repeat, background-position .

Listas e tabelas podem ter estilos personalizados.

JavaScript

FunÃ§Ã£o: dar comportamento Ã s pÃ¡ginas (eventos, validaÃ§Ãµes, interatividade).

CaracterÃ­sticas:

Linguagem client-side (executada no navegador).

Declarada entre <script> ... </script>.

Manipula elementos HTML e CSS via DOM.

Conceitos bÃ¡sicos:

VariÃ¡veis: var, let, const.

Eventos: onclick, onmouseover.

Estruturas de controle: if, else, for, while .

ğŸ“Œ Pontos-chave para sua prova

Internet: origem (ARPANET), protocolos (TCP/IP, HTTP), DNS, chegada ao Brasil.

HTML: estrutura bÃ¡sica, tags principais, listas, tabelas, formulÃ¡rios.

CSS: seletor, propriedade e valor; diferenÃ§as entre inline, interna e externa; principais propriedades (texto, fundo, listas).

JavaScript: dinamismo, variÃ¡veis, eventos, estruturas de controle.

Ferramentas: editores (Notepad++, NetBeans, Dreamweaver), servidores (Apache, IIS).

PadrÃµes Web (W3C): usabilidade, acessibilidade, responsividade.

Linguagens server-side: ASP, PHP, JSP.

ğŸ‘‰ Quer que eu prepare tambÃ©m um quadro-resumo visual (tipo ficha de revisÃ£o/cola organizada em tÃ³picos) para vocÃª usar direto na prova com consulta?

VocÃª disse:
Livro java-ee-7-com-jsf-primefaces-e-cdi-2a-edicao-20150228.pdf
PDF
faÃ§a com esse livro agora
O ChatGPT disse:

Li o livro Java EE 7 com JSF, PrimeFaces e CDI â€“ 2Âª EdiÃ§Ã£o (2015) que vocÃª enviou e organizei um resumo completo com os conceitos e ideias mais importantes para sua prova com consulta.

ğŸ“˜ Resumo â€“ Java EE 7 com JSF, PrimeFaces e CDI
ğŸ”¹ CapÃ­tulo 1 â€“ IntroduÃ§Ã£o ao Java EE

Java EE (Enterprise Edition) â†’ plataforma para desenvolvimento de aplicaÃ§Ãµes corporativas.

DiferenÃ§a Java SE vs Java EE:

SE: recursos bÃ¡sicos (linguagem, collections, IO).

EE: APIs adicionais para sistemas distribuÃ­dos, transaÃ§Ãµes, seguranÃ§a.

APIs do Java EE 7:

JSF (JavaServer Faces) â†’ construÃ§Ã£o de interfaces web com componentes.

CDI (Contexts and Dependency Injection) â†’ gerencia dependÃªncias e ciclo de vida dos beans.

JPA (Java Persistence API) â†’ mapeamento objeto-relacional.

EJB (Enterprise Java Beans) â†’ lÃ³gica de negÃ³cios distribuÃ­da.

JAX-RS â†’ criaÃ§Ã£o de serviÃ§os REST.

ğŸ”¹ CapÃ­tulo 2 â€“ JSF (JavaServer Faces)

Framework MVC para web.

Baseado em componentes reutilizÃ¡veis.

Ciclo de vida do JSF (importante para provas):

Restore View

Apply Request Values

Process Validations

Update Model Values

Invoke Application

Render Response

Managed Beans â†’ classes Java controlando a lÃ³gica.

NavegaÃ§Ã£o â†’ controlada por faces-config.xml ou anotaÃ§Ãµes.

ValidaÃ§Ã£o e conversÃ£o â†’ tags <h:inputText>, <h:message>, validadores padrÃµes ou customizados.

ğŸ”¹ CapÃ­tulo 3 â€“ PrimeFaces

Biblioteca de componentes JSF avanÃ§ados.

Facilita a criaÃ§Ã£o de UI moderna e responsiva.

Exemplos de componentes:

DataTable â†’ tabelas ricas com paginaÃ§Ã£o, filtros, ordenaÃ§Ã£o.

Dialog â†’ janelas modais.

Charts â†’ grÃ¡ficos interativos.

Menus, calendÃ¡rios, upload de arquivos, botÃµes com Ã­cones.

Tema â†’ personalizaÃ§Ã£o com PrimeFaces Theme.

Ajax integrado â†’ chamadas assÃ­ncronas com pouco cÃ³digo.

ğŸ”¹ CapÃ­tulo 4 â€“ CDI (Contexts and Dependency Injection)

Gerenciamento de dependÃªncias â†’ substitui new com injeÃ§Ã£o automÃ¡tica.

Escopos:

@RequestScoped â†’ dura apenas uma requisiÃ§Ã£o.

@SessionScoped â†’ dura a sessÃ£o do usuÃ¡rio.

@ApplicationScoped â†’ compartilhado em toda a aplicaÃ§Ã£o.

@Dependent â†’ escopo padrÃ£o, dependente de quem o consome.

Qualificadores (@Qualifier) â†’ diferenciar implementaÃ§Ãµes.

Produtores (@Produces) â†’ criam objetos customizados para injeÃ§Ã£o.

Interceptors e Decorators â†’ adicionar comportamento sem mudar a lÃ³gica principal.

ğŸ”¹ CapÃ­tulo 5 â€“ JPA e IntegraÃ§Ã£o

ORM (Object-Relational Mapping) â†’ entidades Java representando tabelas.

AnotaÃ§Ãµes principais:

@Entity, @Id, @GeneratedValue.

Relacionamentos: @OneToOne, @OneToMany, @ManyToMany.

JPQL (Java Persistence Query Language) â†’ consultas orientadas a objetos.

EntityManager â†’ responsÃ¡vel por persistÃªncia e transaÃ§Ãµes.

IntegraÃ§Ã£o com JSF/PrimeFaces para exibir dados.

ğŸ”¹ CapÃ­tulo 6 â€“ SeguranÃ§a e Boas PrÃ¡ticas

AutenticaÃ§Ã£o e autorizaÃ§Ã£o â†’ controle de acesso em aplicaÃ§Ãµes corporativas.

JAAS (Java Authentication and Authorization Service).

Boas prÃ¡ticas:

SeparaÃ§Ã£o de camadas (UI, negÃ³cios, persistÃªncia).

ReutilizaÃ§Ã£o de componentes JSF/PrimeFaces.

CDI para reduzir acoplamento.

ValidaÃ§Ã£o no servidor e no cliente.

ğŸ“Œ Pontos-chave para prova

Java EE 7 â†’ conjunto de APIs (JSF, CDI, JPA, EJB, JAX-RS).

JSF â†’ ciclo de vida em 6 fases; uso de Managed Beans; navegaÃ§Ã£o com faces-config.

PrimeFaces â†’ componentes prontos (DataTable, Dialog, Charts), Ajax integrado.

CDI â†’ escopos (@RequestScoped, @SessionScoped etc.), injeÃ§Ã£o de dependÃªncias, interceptors.

JPA â†’ mapeamento objeto-relacional (@Entity, relacionamentos), consultas com JPQL.

SeguranÃ§a â†’ autenticaÃ§Ã£o, autorizaÃ§Ã£o, boas prÃ¡ticas de arquitetura.